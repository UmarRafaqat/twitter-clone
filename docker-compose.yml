services:
  # PostgreSQL for user data and relationships
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: mini_twitter
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mini_twitter
    ports:
      - "5433:5432"  # Changed from "5432:5432" to use port 5433 externally
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mini_twitter -d mini_twitter || exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # MongoDB for tweet content
  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
      - ./init/mongodb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet || exit 0"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  # Cassandra for high-velocity interactions
  cassandra:
    image: cassandra:4
    ports:
      - "9042:9042"
    volumes:
      - ./data/cassandra:/var/lib/cassandra
      - ./init/cassandra:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "nodetool status || exit 0"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 120s  # Give Cassandra 2 minutes to initialize
  
  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
  
  
  # Kafka for event streaming
  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Spark master for processing
  spark-master:
    image: bitnami/spark:3.3
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark-jobs:/opt/spark-jobs
  
  # Spark worker
  spark-worker:
    image: bitnami/spark:3.3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master
    volumes:
      - ./spark-jobs:/opt/spark-jobs
    
     # Minio (S3 compatible) for file storage
  minio:
    image: minio/minio:RELEASE.2023-07-07T07-13-57Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001" --address ":9000"
    volumes:
      - ./data/minio:/data
  # API Server
  api:
    build: ./api
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      cassandra:
        condition: service_started  # Changed from service_healthy to just require started
      kafka:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://mini_twitter:password@postgres:5432/mini_twitter
      - MONGODB_URL=mongodb://mongodb:27017/mini_twitter
      - CASSANDRA_HOSTS=cassandra
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
    volumes:
      - ./api:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  # Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started  # Changed to only require the API to be started, not healthy
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
  # Kafka Consumers
  kafka-consumers:
    build: ./kafka_consumers
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_started
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONGODB_URL=mongodb://mongodb:27017/mini_twitter
      - DATABASE_URL=postgresql://mini_twitter:password@postgres:5432/mini_twitter
      - CASSANDRA_HOSTS=cassandra
    volumes:
      - ./kafka_consumers:/app
    restart: unless-stopped

# Spark Jobs Scheduler
  spark-scheduler:
    build: ./spark-jobs
    depends_on:
      spark-master:
        condition: service_started
      mongodb:
        condition: service_healthy
    volumes:
      - ./spark-jobs:/opt/spark-jobs
    command: python /opt/spark-jobs/scheduler.py
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  cassandra_data:
  minio_data: